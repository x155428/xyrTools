package widgets

import (
	"gioui.org/layout"
	"gioui.org/unit"
	"gioui.org/widget"
	"gioui.org/widget/material"
)

type DropDownInput struct {
	Editor         widget.Editor
	IconButton     widget.Clickable
	Outside        widget.Clickable
	Options        []string
	OptionClicks   []widget.Clickable
	Expanded       bool
	SelectedIndex  int
	List           layout.List
	MaxVisibleOpts int
}

func NewDropDownInput(options []string, selectedIndex int) *DropDownInput {
	d := &DropDownInput{
		Options:        options,
		SelectedIndex:  selectedIndex,
		List:           layout.List{Axis: layout.Vertical},
		MaxVisibleOpts: 8,
	}
	for range options {
		d.OptionClicks = append(d.OptionClicks, widget.Clickable{})
	}
	return d
}

func (d *DropDownInput) Layout(gtx layout.Context, th *material.Theme) layout.Dimensions {
	if d.IconButton.Clicked(gtx) {
		d.Expanded = !d.Expanded
	}
	if d.Expanded && d.Outside.Clicked(gtx) {
		d.Expanded = false
	}

	// 输入框 + 图标组合
	combo := layout.Flex{Axis: layout.Vertical}.Layout(gtx,
		layout.Rigid(func(gtx layout.Context) layout.Dimensions {
			return layout.Stack{}.Layout(gtx,
				layout.Expanded(func(gtx layout.Context) layout.Dimensions {
					inset := layout.UniformInset(unit.Dp(4))
					return inset.Layout(gtx, func(gtx layout.Context) layout.Dimensions {
						return material.Editor(th, &d.Editor, "Select...").Layout(gtx)
					})
				}),
				layout.Stacked(func(gtx layout.Context) layout.Dimensions {
					return layout.E.Layout(gtx, func(gtx layout.Context) layout.Dimensions {
						return material.IconButton(th, &d.IconButton, nil, "test").Layout(gtx) // 可替换为图标
					})
				}),
			)
		}),
		layout.Rigid(func(gtx layout.Context) layout.Dimensions {
			if !d.Expanded {
				return layout.Dimensions{}
			}
			maxHeight := gtx.Dp(unit.Dp(48 * d.MaxVisibleOpts))
			if gtx.Constraints.Max.Y > maxHeight {
				gtx.Constraints.Max.Y = maxHeight
			}
			return d.List.Layout(gtx, len(d.Options), func(gtx layout.Context, i int) layout.Dimensions {
				if d.OptionClicks[i].Clicked(gtx) {
					d.SelectedIndex = i
					d.Expanded = false
					d.Editor.SetText(d.Options[i])
				}
				return layout.UniformInset(unit.Dp(4)).Layout(gtx, func(gtx layout.Context) layout.Dimensions {
					return material.Button(th, &d.OptionClicks[i], d.Options[i]).Layout(gtx)
				})
			})
		}),
	)

	// 捕获外部点击
	if d.Expanded {
		layout.Stack{}.Layout(gtx,
			layout.Expanded(func(gtx layout.Context) layout.Dimensions {
				return d.Outside.Layout(gtx, func(gtx layout.Context) layout.Dimensions {
					return layout.Dimensions{Size: gtx.Constraints.Max}
				})
			}),
		)
	}

	return combo
}
