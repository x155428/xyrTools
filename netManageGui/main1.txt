package main

import (
	//"image/color"
	"image/color"
	//"log"
	"net"
	"xyrTools/netManageGui/widgets"
	"sync"

	//"runtime"

	"gioui.org/app"
	"gioui.org/layout"
	"gioui.org/unit"

	//"gioui.org/widget"

	//"gioui.org/layout"
	"gioui.org/op"

	//"gioui.org/unit"
	"gioui.org/widget/material"
)

func main() {
	var wg sync.WaitGroup
	wg.Add(1)
	// 创建一个新的窗口
	go func() {
		defer wg.Done()
		window := new(app.Window)
		window.Option(app.Title("网卡管理"))
		window.Option(app.Size(unit.Dp(800), unit.Dp(600)))
		th := material.NewTheme()

		// 获取网卡列表
		ifaces, err := net.Interfaces()
		if err != nil {
			// 处理错误
			panic(err)
		}

		// 将网卡列表转为字符串数组
		var interfaceNames []string
		for _, iface := range ifaces {
			interfaceNames = append(interfaceNames, iface.Name)
		}

		var ops op.Ops
		btn := widgets.NewCustomButton("常规按钮")
		btn2 := widgets.NewCustomButton("无色按钮")
		// 设置按钮天蓝色背景
		btn.SetBackgroundColor(color.NRGBA{R: 0x33, G: 0x99, B: 0xFF, A: 255})
		btn2.SetBackgroundColor(color.NRGBA{R: 0xEE, G: 0xEE, B: 0xEE, A: 255})
		btn.SetOnClick(func() {
			println("按钮111111被点击了")
			btn.SizeAuto = false
			btn2.SizeAuto = false
			btn2.SetSize(unit.Dp(100), unit.Dp(20))
			btn.SetSize(unit.Dp(30), unit.Dp(20))
		})
		btn2.SetOnClick(func() {
			btn.SizeAuto = true
			btn2.SizeAuto = true
			println("按钮222222被点击了")
			btn2.SetSize(unit.Dp(30), unit.Dp(20))
			btn.SetSize(unit.Dp(100), unit.Dp(20))
		})

		//input := widgets.NewInput("输入框", unit.Dp(100), unit.Dp(20), true)
		// scroll := widgets.ScrollDemo{
		// 	Options: interfaceNames, // 选项列表,
		// 	List:    layout.List{Axis: layout.Vertical},
		// }
		dropDown := widgets.NewDropDownInput(interfaceNames)

		// 事件循环
		for {
			switch event := window.Event().(type) {
			case app.FrameEvent:
				gtx := app.NewContext(&ops, event)
				//gtx.Event()
				// 使用 layout 方法绘制 select 组件

				layout.Flex{
					Axis:    layout.Vertical,
					Spacing: layout.SpaceEnd,
				}.Layout(gtx,
					// layout.Rigid(func(gtx layout.Context) layout.Dimensions {
					// 	return btn2.Layout(gtx, th)
					// }),
					// layout.Rigid(func(gtx layout.Context) layout.Dimensions {
					// 	return btn.Layout(gtx, th)
					// }),
					// layout.Rigid(func(gtx layout.Context) layout.Dimensions {
					// 	return input.Layout(gtx, th)
					// }),
					// layout.Rigid(func(gtx layout.Context) layout.Dimensions {
					// 	return scroll.Layout(gtx, th)
					// }),
					layout.Rigid(func(gtx layout.Context) layout.Dimensions {
						return dropDown.Layout(gtx, th)
					}),
				)
				// 结束当前帧并绘制窗口内容
				event.Frame(gtx.Ops)
			case app.DestroyEvent:
				return
			}
		}
	}()
	wg.Wait()

	// 启动应用程序
	//app.Main()
}

// func netManageGuiUseGio() {
// 	runtime.LockOSThread()
// 	// 1. 创建窗口
// 	window := new(app.Window)
// 	window.Option(app.Title("网卡管理"))
// 	window.Option(app.Size(unit.Dp(800), unit.Dp(600)))

// 	// 2. 初始化数据
// 	interfaces := []NetworkInterface{
// 		{Name: "eth0", IPAddress: "192.168.1.2", Status: "已连接"},
// 		{Name: "wlan0", IPAddress: "192.168.1.3", Status: "未连接"},
// 	}
// 	var selectedInterface *NetworkInterface
// 	var list widget.List
// 	list.Axis = layout.Vertical
// 	buttons := make([]widget.Clickable, len(interfaces)) // 按钮状态数组

// 	// 3. 加载主题
// 	theme := material.NewTheme()

// 	// 4. 主事件循环
// 	var ops op.Ops
// 	for {
// 		switch e := window.Event().(type) {
// 		case app.DestroyEvent:
// 			runtime.UnlockOSThread()
// 			return
// 			// 结束该窗口
// 			//os.Exit(0)
// 		case app.FrameEvent:
// 			gtx := app.NewContext(&ops, e)

// 			// 5. 布局：左右分栏
// 			layout.Flex{Axis: layout.Horizontal}.Layout(gtx,
// 				// 左侧网卡列表 (占30%宽度)
// 				layout.Flexed(0.3, func(gtx layout.Context) layout.Dimensions {
// 					return material.List(theme, &list).Layout(gtx, len(interfaces),
// 						func(gtx layout.Context, index int) layout.Dimensions {
// 							item := interfaces[index]
// 							if buttons[index].Clicked(gtx) {
// 								selectedInterface = &interfaces[index]
// 							}
// 							return material.Button(theme, &buttons[index], item.Name).Layout(gtx)
// 						})
// 				}),
// 				// 右侧配置面板 (占70%宽度)
// 				layout.Flexed(0.7, func(gtx layout.Context) layout.Dimensions {
// 					if selectedInterface == nil {
// 						return layout.Dimensions{}
// 					}
// 					return layout.UniformInset(unit.Dp(16)).Layout(gtx, func(gtx layout.Context) layout.Dimensions {
// 						return layout.Flex{
// 							Axis: layout.Vertical,
// 						}.Layout(gtx,
// 							layout.Rigid(func(gtx layout.Context) layout.Dimensions {
// 								title := material.H6(theme, "网卡配置: "+selectedInterface.Name)
// 								return title.Layout(gtx)
// 							}),
// 							layout.Rigid(func(gtx layout.Context) layout.Dimensions {
// 								ipLabel := material.Body1(theme, "IP地址: "+selectedInterface.IPAddress)
// 								return ipLabel.Layout(gtx)
// 							}),
// 							layout.Rigid(func(gtx layout.Context) layout.Dimensions {
// 								statusLabel := material.Body1(theme, "状态: "+selectedInterface.Status)
// 								statusLabel.Color = color.NRGBA{R: 0xFF, A: 0xFF}
// 								return statusLabel.Layout(gtx)
// 							}),
// 						)
// 					})
// 				}),
// 			)
// 			e.Frame(gtx.Ops)
// 		}
// 	}
// }
